{
    "setActorSpeedControl": {
        "statename": "setActorSpeedControl",
        "AddOption": "AddToggleOption(\"Actors control speed\", Main.EnableActorSpeedControl)",
        "OnOptionSelect": "Main.EnableActorSpeedControl = !Main.EnableActorSpeedControl\n        SetToggleOptionValueST(Main.EnableActorSpeedControl, False, \"setActorSpeedControl\")\n",
        "OnOptionHighlight": "SetInfoText(\"Let actors increase the scene speed on their own when their Excitement gets high enough \\nThis feature is experimental, disable if Osex behaves strangely on it's own\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "",
        "OnOptionSliderAccept": "",
        "OnOptionKeyMapChange": ""
    },
    "setSexExcitementMult": {
        "statename": "setSexExcitementMult",
        "AddOption": "AddSliderOption(\"Excitement multiplier\", Main.SexExcitementMult, \"{2} x\")",
        "OnOptionSelect": "",
        "OnOptionHighlight": "SetInfoText(\"Multiply all the pleasure/second received by actors by this amount\\nThis effectively lets you choose how long you want sex to last\\n3.0 = 3 times shorter, 0.1 = 10 times longer\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "SetSliderDialogStartValue(Main.SexExcitementMult)\n        SetSliderDialogDefaultValue(1.0)\n        SetSliderDialogRange(0.1, 3.0)\n        SetSliderDialogInterval(0.1)\n",
        "OnOptionSliderAccept": "Main.SexExcitementMult = Value\n        SetSliderOptionValue(SetsexExcitementMult, Value, \"{2} x\")\n",
        "OnOptionKeyMapChange": ""
    },
    "setClipinglessFirstPerson": {
        "statename": "setClipinglessFirstPerson",
        "AddOption": "AddToggleOption(\"Clipping-less first person\", Main.EnableImprovedCamSupport)",
        "OnOptionSelect": "Main.EnableImprovedCamSupport = !Main.EnableImprovedCamSupport\n        SetToggleOptionValueST(Main.EnableImprovedCamSupport, False, \"setClipinglessFirstPerson\")\n",
        "OnOptionHighlight": "SetInfoText(\"REQUIRES: Improved Camera, my custom ini settings file\\nExperience first person without any clipping\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "",
        "OnOptionSliderAccept": "",
        "OnOptionKeyMapChange": ""
    },
    "setCustomTimescale": {
        "statename": "setCustomTimescale",
        "AddOption": "AddSliderOption(\"Custom timescale\", Main.CustomTimescale, \"{0}\")",
        "OnOptionSelect": "",
        "OnOptionHighlight": "SetInfoText(\"Changes the timescale during sex scenes, and reverts it back to what it was after the scene ends\\nUseful if you don't want sex taking an entire day\\n0 = this feature is disabled\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "SetSliderDialogStartValue(Main.CustomTimescale)\n        SetSliderDialogDefaultValue(0.0)\n        SetSliderDialogRange(0, 40)\n        SetSliderDialogInterval(1)\n",
        "OnOptionSliderAccept": "Main.CustomTimescale = (Value as Int)\n        SetSliderOptionValueST(Value, \"{0}\")\n",
        "OnOptionKeyMapChange": ""
    },
    "setMisallignmentOption": {
        "statename": "setMisallignmentOption",
        "AddOption": "AddToggleOption(\"Enable misalignment protection\", Main.MisallignmentProtection)",
        "OnOptionSelect": "Main.MisallignmentProtection = !Main.MisallignmentProtection\n        SetToggleOptionValueST(Main.MisallignmentProtection, False, \"setMisallignmentOption\")\n",
        "OnOptionHighlight": "SetInfoText(\"Enable automatic misalignment detection\\nYou may want to disable this if you want to do some custom realigning.\\nWarning: can cause characters to glitch on some setups, beware enabling this\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "",
        "OnOptionSliderAccept": "",
        "OnOptionKeyMapChange": ""
    },
    "setFlipFix": {
        "statename": "setFlipFix",
        "AddOption": "AddToggleOption(\"Enable flipped animation fix\", Main.FixFlippedAnimations)",
        "OnOptionSelect": "Main.FixFlippedAnimations = !Main.FixFlippedAnimations\n        SetToggleOptionValueST(Main.FixFlippedAnimations, False, \"setFlipFix\")\n",
        "OnOptionHighlight": "SetInfoText(\"Fix some third party animations being flipped 180 degrees\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "",
        "OnOptionSliderAccept": "",
        "OnOptionKeyMapChange": ""
    },
    "setUseFades": {
        "statename": "setUseFades",
        "AddOption": "AddToggleOption(\"Fade out on intro/outro\", Main.UseFades)",
        "OnOptionSelect": "Main.UseFades = !Main.UseFades\n        SetToggleOptionValueST(Main.UseFades, False, \"setUseFades\")\n",
        "OnOptionHighlight": "SetInfoText(\"Fade the screen to black when a scene starts/ends\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "",
        "OnOptionSliderAccept": "",
        "OnOptionKeyMapChange": ""
    },
    "setEndAfterActorHit": {
        "statename": "setEndAfterActorHit",
        "AddOption": "AddToggleOption(\"End if attacked\", Main.EndAfterActorHit)",
        "OnOptionSelect": "Main.EndAfterActorHit = !Main.EndAfterActorHit\n        SetToggleOptionValueST(Main.EndAfterActorHit, False, \"setEndAfterActorHit\")\n",
        "OnOptionHighlight": "SetInfoText(\"End the scene after someone in the scene is hit\\n Can misfire with certain other mods\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "",
        "OnOptionSliderAccept": "",
        "OnOptionKeyMapChange": ""
    },
    "setUseRumble": {
        "statename": "setUseRumble",
        "AddOption": "AddToggleOption(\"Use controller rumble\", Main.UseRumble)",
        "OnOptionSelect": "Main.UseRumble = !Main.UseRumble\n        SetToggleOptionValueST(Main.UseRumble, False, \"setUseRumble\")\n",
        "OnOptionHighlight": "SetInfoText(\"Rumble a controller on thrust, if a controller is being used\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "",
        "OnOptionSliderAccept": "",
        "OnOptionKeyMapChange": ""
    },
    "setUseScreenShake": {
        "statename": "setUseScreenShake",
        "AddOption": "AddToggleOption(\"Use extra screenshake\", Main.UseScreenShake)",
        "OnOptionSelect": "Main.UseScreenShake = !Main.UseScreenShake\n        SetToggleOptionValueST(Main.UseScreenShake, False, \"setUseScreenShake\")\n",
        "OnOptionHighlight": "SetInfoText(\"Use extra screenshake on thrust\\n This is not compatible with Improved Camera's first person\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "",
        "OnOptionSliderAccept": "",
        "OnOptionKeyMapChange": ""
    },
    "setForceFirstPerson": {
        "statename": "setForceFirstPerson",
        "AddOption": "AddToggleOption(\"Force return to first person after scene\", Main.ForceFirstPersonAfter)",
        "OnOptionSelect": "Main.ForceFirstPersonAfter = !Main.ForceFirstPersonAfter\n        SetToggleOptionValueST(Main.ForceFirstPersonAfter, False, \"setForceFirstPerson\")\n",
        "OnOptionHighlight": "SetInfoText(\"Return to first person after scene ends.\\nFixes the hybrid-camera bug in Improved Camera\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "",
        "OnOptionSliderAccept": "",
        "OnOptionKeyMapChange": ""
    },
    "setScaling": {
        "statename": "setScaling",
        "AddOption": "AddToggleOption(\"Disable scaling\", Main.DisableScaling)",
        "OnOptionSelect": "Main.DisableScaling = !Main.DisableScaling\n        SetToggleOptionValueST(Main.DisableScaling, False, \"setScaling\")\n",
        "OnOptionHighlight": "SetInfoText(\"Disable changing actor height to fit animations better when scene starts\\nDisabling scaling will absolutely wreck animation alignment, turning it off is not recommended\\nHowever, turning it off may help fix issues with HDT-SMP\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "",
        "OnOptionSliderAccept": "",
        "OnOptionKeyMapChange": ""
    },
    "setResetPosition": {
        "statename": "setResetPosition",
        "AddOption": "AddToggleOption(\"Reset position after scene\", Main.ResetPosAfterSceneEnd) \t\t",
        "OnOptionSelect": "Main.ResetPosAfterSceneEnd = !Main.ResetPosAfterSceneEnd\n        SetToggleOptionValueST(Main.ResetPosAfterSceneEnd, False, \"setResetPosition\")\n",
        "OnOptionHighlight": "SetInfoText(\"Reset actors to where the where when the scene started, when the scene ends\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "",
        "OnOptionSliderAccept": "",
        "OnOptionKeyMapChange": ""
    },
    "setOnlyGayAnimsInGayScenes": {
        "statename": "setOnlyGayAnimsInGayScenes",
        "AddOption": "AddToggleOption(\"Only use same sex animations for same sex scenes\", Main.OnlyGayAnimsInGayScenes)",
        "OnOptionSelect": "Main.OnlyGayAnimsInGayScenes = !Main.OnlyGayAnimsInGayScenes\n        SetToggleOptionValueST(Main.OnlyGayAnimsInGayScenes, False, \"setOnlyGayAnimsInGayScenes\")\n",
        "OnOptionHighlight": "SetInfoText(\"In a same sex scene (Gay & Lesbian) only same sex animations will be used. There is no fallback in this option, so be aware that you will probably have limited animation options.\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "",
        "OnOptionSliderAccept": "",
        "OnOptionKeyMapChange": ""
    },
    "setPlayerAlwaysDomStraight": {
        "statename": "setPlayerAlwaysDomStraight",
        "AddOption": "AddToggleOption(\"Player Always Dom: Straight\", Main.PlayerAlwaysDomStraight)",
        "OnOptionSelect": "Main.PlayerAlwaysDomStraight = !Main.PlayerAlwaysDomStraight\n        SetToggleOptionValueST(Main.PlayerAlwaysDomStraight, False, \"setPlayerAlwaysDomStraight\")\n",
        "OnOptionHighlight": "SetInfoText(\"Forces the player to always take the Dom role during Straight scenes. \\nIf neither are enabled default actor placement will take place, if both are enabled player will default to Dom. \\nNote that individual mods can temporarily override this setting.\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "",
        "OnOptionSliderAccept": "",
        "OnOptionKeyMapChange": ""
    },
    "setPlayerAlwaysSubStraight": {
        "statename": "setPlayerAlwaysSubStraight",
        "AddOption": "AddToggleOption(\"Player Always Sub: Straight\", Main.PlayerAlwaysSubStraight)",
        "OnOptionSelect": "Main.PlayerAlwaysSubStraight = !Main.PlayerAlwaysSubStraight\n        SetToggleOptionValueST(Main.PlayerAlwaysSubStraight, False, \"setPlayerAlwaysSubStraight\")\n",
        "OnOptionHighlight": "SetInfoText(\"Forces the player to always take the Sub role during Straight scenes. \\nIf neither are enabled default actor placement will take place, if both are enabled player will default to Dom. \\nNote that individual mods can temporarily override this setting.\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "",
        "OnOptionSliderAccept": "",
        "OnOptionKeyMapChange": ""
    },
    "setPlayerAlwaysDomGay": {
        "statename": "setPlayerAlwaysDomGay",
        "AddOption": "AddToggleOption(\"Player Always Dom: Gay\", Main.PlayerAlwaysDomGay)",
        "OnOptionSelect": "Main.PlayerAlwaysDomGay = !Main.PlayerAlwaysDomGay\n        SetToggleOptionValueST(Main.PlayerAlwaysDomGay, False, \"setPlayerAlwaysDomGay\")\n",
        "OnOptionHighlight": "SetInfoText(\"Forces the player to always take the Dom role during Gay scenes. \\nIf neither are enabled default actor placement will take place, if both are enabled player will default to Dom. \\nNote that individual mods can temporarily override this setting.\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "",
        "OnOptionSliderAccept": "",
        "OnOptionKeyMapChange": ""
    },
    "setPlayerAlwaysSubGay": {
        "statename": "setPlayerAlwaysSubGay",
        "AddOption": "AddToggleOption(\"Player Always Sub: Gay\", Main.PlayerAlwaysSubGay)",
        "OnOptionSelect": "Main.PlayerAlwaysSubGay = !Main.PlayerAlwaysSubGay\n        SetToggleOptionValueST(Main.PlayerAlwaysSubGay, False, \"setPlayerAlwaysSubGay\")\n",
        "OnOptionHighlight": "SetInfoText(\"Forces the player to always take the Sub role during Gay scenes. \\nIf neither are enabled default actor placement will take place, if both are enabled player will default to Dom. \\nNote that individual mods can temporarily override this setting.\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "",
        "OnOptionSliderAccept": "",
        "OnOptionKeyMapChange": ""
    },
    "setEndOnOrgasm": {
        "statename": "setEndOnOrgasm",
        "AddOption": "AddToggleOption(\"End sex after Dom actor orgasm\", Main.EndOnDomOrgasm)",
        "OnOptionSelect": "Main.EndOnDomOrgasm = !Main.EndOnDomOrgasm\n        SetToggleOptionValueST(SetEndOnOrgasm, Main.EndOnDomOrgasm, False, \"setEndOnOrgasm\")\n",
        "OnOptionHighlight": "SetInfoText(\"End the Osex scene automatically when the dominant actor (usually the male) orgasms\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "",
        "OnOptionSliderAccept": "",
        "OnOptionKeyMapChange": ""
    },
    "setEndOnSubOrgasm": {
        "statename": "setEndOnSubOrgasm",
        "AddOption": "AddToggleOption(\"End sex after Sub actor orgasm\", Main.EndOnSubOrgasm)",
        "OnOptionSelect": "Main.EndOnSubOrgasm = !Main.EndOnSubOrgasm\n        SetToggleOptionValueST(SetEndOnSubOrgasm, Main.EndOnSubOrgasm, False, \"setEndOnSubOrgasm\")\n",
        "OnOptionHighlight": "SetInfoText(\"End the Osex scene automatically when the submissive actor (usually the female) orgasms\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "",
        "OnOptionSliderAccept": "",
        "OnOptionKeyMapChange": ""
    },
    "setEndOnBothOrgasm": {
        "statename": "setEndOnBothOrgasm",
        "AddOption": "AddToggleOption(\"Require both actors to orgasm to end\", Main.RequireBothOrgasmsToFinish)",
        "OnOptionSelect": "Main.RequireBothOrgasmsToFinish = !Main.RequireBothOrgasmsToFinish\n        SetToggleOptionValueST(SetEndOnBothOrgasm, Main.RequireBothOrgasmsToFinish, False, \"setEndOnBothOrgasm\")\n",
        "OnOptionHighlight": "SetInfoText(\"Will prevent the above 2 settings from ending the scene if both actors have not had an orgasm at least once\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "",
        "OnOptionSliderAccept": "",
        "OnOptionKeyMapChange": ""
    },
    "setSlowMoOrgasms": {
        "statename": "setSlowMoOrgasms",
        "AddOption": "AddToggleOption(\"Slow motion on orgasm\", Main.SlowMoOnOrgasm)",
        "OnOptionSelect": "Main.SlowMoOnOrgasm = !Main.SlowMoOnOrgasm\n        SetToggleOptionValueST(Main.SlowMoOnOrgasm, False, \"setSlowMoOrgasms\")\n",
        "OnOptionHighlight": "SetInfoText(\"Add in a few seconds of slow-motion right when the player orgasms\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "",
        "OnOptionSliderAccept": "",
        "OnOptionKeyMapChange": ""
    },
    "setOrgasmBoostsRel": {
        "statename": "setOrgasmBoostsRel",
        "AddOption": "AddToggleOption(\"Orgasm boosts relationship rank\", Main.OrgasmIncreasesRelationship)",
        "OnOptionSelect": "Main.OrgasmIncreasesRelationship = !Main.OrgasmIncreasesRelationship\n        SetToggleOptionValueST(Main.OrgasmIncreasesRelationship, False, \"setOrgasmBoostsRel\")\n",
        "OnOptionHighlight": "SetInfoText(\"Giving orgasms to actors you have a relationship rank of 0 with will increase them to rank 1, marking them as a friend\\nThis may open up unique options in some mods\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "",
        "OnOptionSliderAccept": "",
        "OnOptionKeyMapChange": ""
    },
    "setEnableBeds": {
        "statename": "setEnableBeds",
        "AddOption": "AddToggleOption(\"Use beds\", Main.UseBed)",
        "OnOptionSelect": "Main.UseBed = !Main.UseBed\n        SetToggleOptionValueST(Main.UseBed, False, \"setEnableBeds\")\n",
        "OnOptionHighlight": "SetInfoText(\"Actors will find the nearest bed to have sex on\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "",
        "OnOptionSliderAccept": "",
        "OnOptionKeyMapChange": ""
    },
    "setBedSearchDistance": {
        "statename": "setBedSearchDistance",
        "AddOption": "AddSliderOption(\"Bed search radius\", Main.BedSearchDistance, \"{0} meters\")",
        "OnOptionSelect": "",
        "OnOptionHighlight": "SetInfoText(\"High values may increase animation start time\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "SetSliderDialogStartValue(Main.BedSearchDistance)\n        SetSliderDialogDefaultValue(15.0)\n        SetSliderDialogRange(1, 30)\n        SetSliderDialogInterval(1)\n",
        "OnOptionSliderAccept": "Main.BedSearchDistance = (Value as Int)\n        SetSliderOptionValueST(Value, \"{0} meters\")\n",
        "OnOptionKeyMapChange": ""
    },
    "setBedReallignment": {
        "statename": "setBedReallignment",
        "AddOption": "AddSliderOption(\"Bed realignment\", Main.BedReallignment, \"{0} units\")",
        "OnOptionSelect": "",
        "OnOptionHighlight": "SetInfoText(\"Move actors forward/back by this amount on a bed\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "SetSliderDialogStartValue(Main.BedReallignment)\n        SetSliderDialogDefaultValue(0.0)\n        SetSliderDialogRange(-250, 250)\n        SetSliderDialogInterval(1)\n",
        "OnOptionSliderAccept": "Main.BedReallignment = (Value as Int)\n        SetSliderOptionValueST(Value, \"{0} units\")\n",
        "OnOptionKeyMapChange": ""
    },
    "setBedAlgo": {
        "statename": "setBedAlgo",
        "AddOption": "AddToggleOption(\"Use alternate bed search method\", Main.UseAlternateBedSearch)",
        "OnOptionSelect": "Main.UseAlternateBedSearch = !Main.UseAlternateBedSearch\n        SetToggleOptionValueST(Main.UseAlternateBedSearch, False, \"setBedAlgo\")\n",
        "OnOptionHighlight": "SetInfoText(\"Use a slower papyrus bed search method rather than a faster native one\\n May find more beds but only enable if a bed is not detected\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "",
        "OnOptionSliderAccept": "",
        "OnOptionKeyMapChange": ""
    },
    "setDomBar": {
        "statename": "setDomBar",
        "AddOption": "AddToggleOption(\"Main actor HUD bar\", Main.EnableDomBar)",
        "OnOptionSelect": "Main.EnableDomBar = !Main.EnableDomBar\n        SetToggleOptionValueST(Main.EnableDomBar, False, \"setDomBar\")\n",
        "OnOptionHighlight": "SetInfoText(\"Enable the on-screen bar that tracks the dominant actor's Excitement\\nActor's orgasm when their Excitement maxes out\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "",
        "OnOptionSliderAccept": "",
        "OnOptionKeyMapChange": ""
    },
    "setSubBar": {
        "statename": "setSubBar",
        "AddOption": "AddToggleOption(\"Second actor HUD bar\", Main.EnableSubBar)",
        "OnOptionSelect": "Main.EnableSubBar = !Main.EnableSubBar\n        SetToggleOptionValueST(Main.EnableSubBar, False, \"setSubBar\")\n",
        "OnOptionHighlight": "SetInfoText(\"Enable the on-screen bar that tracks the second actor's Excitement\\nActor's orgasm when their Excitement maxes out\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "",
        "OnOptionSliderAccept": "",
        "OnOptionKeyMapChange": ""
    },
    "setThirdBar": {
        "statename": "setThirdBar",
        "AddOption": "AddToggleOption(\"Third actor HUD bar\", Main.EnableThirdBar)",
        "OnOptionSelect": "Main.EnableThirdBar = !Main.EnableThirdBar\n        SetToggleOptionValueST(Main.EnableThirdBar, False, \"setThirdBar\")\n",
        "OnOptionHighlight": "SetInfoText(\"Enable the on-screen bar that tracks the third actor's Excitement\\nActor's orgasm when their Excitement maxes out\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "",
        "OnOptionSliderAccept": "",
        "OnOptionKeyMapChange": ""
    },
    "setAutoHideBar": {
        "statename": "setAutoHideBar",
        "AddOption": "AddToggleOption(\"Autohide bars\", Main.AutoHideBars)",
        "OnOptionSelect": "Main.AutoHideBars = !Main.AutoHideBars\n        SetToggleOptionValueST(Main.AutoHideBars, False, \"setAutoHideBar\")\n",
        "OnOptionHighlight": "SetInfoText(\"Automatically hide the bars during sex when not interacting with the UI\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "",
        "OnOptionSliderAccept": "",
        "OnOptionKeyMapChange": ""
    },
    "setMatchColorToGender": {
        "statename": "setMatchColorToGender",
        "AddOption": "AddToggleOption(\"Match color to gender\", Main.MatchBarColorToGender)",
        "OnOptionSelect": "Main.MatchBarColorToGender = !Main.MatchBarColorToGender\n        SetToggleOptionValueST(Main.MatchBarColorToGender, False, \"setMatchColorToGender\")\n",
        "OnOptionHighlight": "SetInfoText(\"Change the color of the bars to match the gender of the character\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "",
        "OnOptionSliderAccept": "",
        "OnOptionKeyMapChange": ""
    },
    "setHideNPCOnNPCBars": {
        "statename": "setHideNPCOnNPCBars",
        "AddOption": "AddToggleOption(\"Hide bars in NPC-only scenes\", Main.HideBarsInNPCScenes)",
        "OnOptionSelect": "Main.HideBarsInNPCScenes = !Main.HideBarsInNPCScenes\n        SetToggleOptionValueST(Main.HideBarsInNPCScenes, False, \"setHideNPCOnNPCBars\")\n",
        "OnOptionHighlight": "SetInfoText(\"Do not show excitement bars if the player is not in a scene\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "",
        "OnOptionSliderAccept": "",
        "OnOptionKeyMapChange": ""
    },
    "setResetState": {
        "statename": "setResetState",
        "AddOption": "AddTextOption(\"Reset thread state\", \"\")",
        "OnOptionSelect": "Main.ResetState()\n",
        "OnOptionHighlight": "SetInfoText(\"Click this if you keep getting a Scene Already Running type error\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "",
        "OnOptionSliderAccept": "",
        "OnOptionKeyMapChange": ""
    },
    "setRebuildDatabase": {
        "statename": "setRebuildDatabase",
        "AddOption": "AddTextOption(\"Rebuild animation database\", \"\")",
        "OnOptionSelect": "Debug.MessageBox(\"Close all menus and watch the console until it is done\")\n        Main.GetODatabase().InitDatabase()\n",
        "OnOptionHighlight": "SetInfoText(\"This will rebuild OStim's internal animation database.\\n You only need to click this if you have installed or uninstalled an animation pack MID-playthrough\\n The animation database is automatically built at the start of a new playthrough\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "",
        "OnOptionSliderAccept": "",
        "OnOptionKeyMapChange": ""
    },
    "setUpdate": {
        "statename": "setUpdate",
        "AddOption": "AddTextOption(\"Update OStim\", \"\")",
        "OnOptionSelect": "Debug.MessageBox(\"Close all menus now\")\n        OStimUpdaterScript oupdater = Game.GetFormFromFile(0x000D67, \"Ostim.esp\") as OStimUpdaterScript\n        oupdater.DoUpdate()\n",
        "OnOptionHighlight": "SetInfoText(\"Try to flush out old scripts.\\nMay not be reliable, perform a clean install if you get weird behavior after updating\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "",
        "OnOptionSliderAccept": "",
        "OnOptionKeyMapChange": ""
    },
    "setMute": {
        "statename": "setMute",
        "AddOption": "AddToggleOption(\"Mute vanilla OSA sounds\", Main.MuteOSA)",
        "OnOptionSelect": "Main.MuteOSA = !Main.MuteOSA\n        SetToggleOptionValueST(Main.MuteOSA, False, \"setMute\")\n",
        "OnOptionHighlight": "SetInfoText(\"Mute sounds coming from the OSA engine\\nYou should probably only disable this if you have a soundpack installed\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "",
        "OnOptionSliderAccept": "",
        "OnOptionKeyMapChange": ""
    },
    "setAlwaysUndressAtStart": {
        "statename": "setAlwaysUndressAtStart",
        "AddOption": "AddToggleOption(\"Fully undress at start\", Main.AlwaysUndressAtAnimStart)",
        "OnOptionSelect": "Main.AlwaysUndressAtAnimStart = !Main.AlwaysUndressAtAnimStart\n        SetToggleOptionValueST(Main.AlwaysUndressAtAnimStart, False, \"setAlwaysUndressAtStart\")\n",
        "OnOptionHighlight": "SetInfoText(\"Actors will always get undressed as a scene starts \\nMods using this mod's API can force an undress to occur even if this isn't checked\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "",
        "OnOptionSliderAccept": "",
        "OnOptionKeyMapChange": ""
    },
    "setUndressIfneed": {
        "statename": "setUndressIfneed",
        "AddOption": "AddToggleOption(\"Remove clothes mid-scene\", Main.AutoUndressIfNeeded)",
        "OnOptionSelect": "Main.AutoUndressIfNeeded = !Main.AutoUndressIfNeeded\n        SetToggleOptionValueST(Main.AutoUndressIfNeeded, False, \"setUndressIfneed\")\n",
        "OnOptionHighlight": "",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "",
        "OnOptionSliderAccept": "",
        "OnOptionKeyMapChange": ""
    },
    "setDropClothes": {
        "statename": "setDropClothes",
        "AddOption": "AddToggleOption(\"Toss clothes onto ground\", Main.TossClothesOntoGround)",
        "OnOptionSelect": "Main.TossClothesOntoGround = !Main.TossClothesOntoGround\n        SetToggleOptionValueST(Main.TossClothesOntoGround, False, \"setDropClothes\")\n",
        "OnOptionHighlight": "SetInfoText(\"Characters will drop clothes they take off onto the ground instead of storing them in their inventory\\nCharacters will automatically pick them up when redressing\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "",
        "OnOptionSliderAccept": "",
        "OnOptionKeyMapChange": ""
    },
    "setAnimateRedress": {
        "statename": "setAnimateRedress",
        "AddOption": "AddToggleOption(\"Use animated redress\", Main.FullyAnimateRedress)",
        "OnOptionSelect": "Main.FullyAnimateRedress = !Main.FullyAnimateRedress\n        SetToggleOptionValueST(Main.FullyAnimateRedress, False, \"setAnimateRedress\")\n",
        "OnOptionHighlight": "SetInfoText(\"Makes NPCs play redressing animations after a scene ends if they need to redress\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "",
        "OnOptionSliderAccept": "",
        "OnOptionKeyMapChange": ""
    },
    "setAIControl": {
        "statename": "setAIControl",
        "AddOption": "AddToggleOption(\"Enable full-auto control\", Main.UseAIControl)",
        "OnOptionSelect": "Main.UseAIControl = !Main.UseAIControl\n        SetToggleOptionValueST(Main.UseAIControl, False, \"setAIControl\")\n",
        "OnOptionHighlight": "SetInfoText(\"If enabled, scenes will play out on their own without user input via procedural generation\\nNote: If you have only used Manual mode briefly or not at all, and never became adept with using it, I STRONGLY recommend you give manual mode a fair chance before using this\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "",
        "OnOptionSliderAccept": "",
        "OnOptionKeyMapChange": ""
    },
    "setForceAIIfAttacking": {
        "statename": "setForceAIIfAttacking",
        "AddOption": "AddToggleOption(\"Force full-auto control if player attacking\", Main.UseAIPlayerAggressor)",
        "OnOptionSelect": "Main.UseAIPlayerAggressor = !Main.UseAIPlayerAggressor\n        SetToggleOptionValueST(Main.UseAIPlayerAggressor, False, \"setForceAIIfAttacking\")\n",
        "OnOptionHighlight": "SetInfoText(\"If using manual mode by default, this will force automatic mode to activate if the player is the attacker in an aggressive scene\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "",
        "OnOptionSliderAccept": "",
        "OnOptionKeyMapChange": ""
    },
    "setForceAIIfAttacked": {
        "statename": "setForceAIIfAttacked",
        "AddOption": "AddToggleOption(\"Force full-auto control if player is attacked\", Main.UseAIPlayerAggressed)",
        "OnOptionSelect": "Main.UseAIPlayerAggressed = !Main.UseAIPlayerAggressed\n        SetToggleOptionValueST(Main.UseAIPlayerAggressed, False, \"setForceAIIfAttacked\")\n",
        "OnOptionHighlight": "SetInfoText(\"If using manual mode by default, this will force automatic mode to activate if the player is the victim in an aggressive scene\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "",
        "OnOptionSliderAccept": "",
        "OnOptionKeyMapChange": ""
    },
    "setForceAIInConsensualScenes": {
        "statename": "setForceAIInConsensualScenes",
        "AddOption": "AddToggleOption(\"Force full-auto control in consensual scenes\", Main.UseAINonAggressive)",
        "OnOptionSelect": "Main.UseAINonAggressive = !Main.UseAINonAggressive\n        SetToggleOptionValueST(Main.UseAINonAggressive, False, \"setForceAIInConsensualScenes\")\n",
        "OnOptionHighlight": "SetInfoText(\"If using manual mode by default, this will force automatic mode to activate in consensual scenes\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "",
        "OnOptionSliderAccept": "",
        "OnOptionKeyMapChange": ""
    },
    "setUseAutoFades": {
        "statename": "setUseAutoFades",
        "AddOption": "AddToggleOption(\"Fade out in between animation transitions\", Main.UseAutoFades)",
        "OnOptionSelect": "Main.UseAutoFades = !Main.UseAutoFades\n        SetToggleOptionValueST(Main.UseAutoFades, False, \"setUseAutoFades\")\n",
        "OnOptionHighlight": "SetInfoText(\"Fade to black in between animation transitions\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "",
        "OnOptionSliderAccept": "",
        "OnOptionKeyMapChange": ""
    },
    "setAIChangeChance": {
        "statename": "setAIChangeChance",
        "AddOption": "AddSliderOption(\"AI Animation Change Chance\", Main.AiSwitchChance, \"{0}\")",
        "OnOptionSelect": "",
        "OnOptionHighlight": "SetInfoText(\"Chance that characters will switch animations mid scene\\nDoes not affect chance of a foreplay -> full sex transition\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "SetSliderDialogStartValue(Main.AiSwitchChance)\n        SetSliderDialogDefaultValue(6.0)\n        SetSliderDialogRange(0, 100)\n        SetSliderDialogInterval(1)\n",
        "OnOptionSliderAccept": "Main.AiSwitchChance = (Value as Int)\n        SetSliderOptionValueST(Value, \"{0}\")\n",
        "OnOptionKeyMapChange": ""
    },
    "setUseFreeCam": {
        "statename": "setUseFreeCam",
        "AddOption": "AddToggleOption(\"Switch to freecam mode on start\", Main.UseFreeCam)",
        "OnOptionSelect": "Main.UseFreeCam = !Main.UseFreeCam\n        SetToggleOptionValueST(Main.UseFreeCam, False, \"setUseFreeCam\")\n",
        "OnOptionHighlight": "SetInfoText(\"Automatically switch to freecam when a scene starts\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "",
        "OnOptionSliderAccept": "",
        "OnOptionKeyMapChange": ""
    },
    "setFreeCamFOV": {
        "statename": "setFreeCamFOV",
        "AddOption": "AddSliderOption(\"Freecam FOV\", Main.FreecamFOV, \"{0}\")",
        "OnOptionSelect": "",
        "OnOptionHighlight": "SetInfoText(\"The field of view of the camera when in freecam mode\\nThis is incompatible with Improved Camera\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "SetSliderDialogStartValue(Main.FreecamFOV)\n        SetSliderDialogDefaultValue(45.0)\n        SetSliderDialogRange(1, 120)\n        SetSliderDialogInterval(1)\n",
        "OnOptionSliderAccept": "Main.FreecamFOV = (Value as Int)\n        SetSliderOptionValueST(Value, \"{0}\")\n",
        "OnOptionKeyMapChange": ""
    },
    "setDefaultFOV": {
        "statename": "setDefaultFOV",
        "AddOption": "AddSliderOption(\"Default FOV\", Main.DefaultFOV, \"{0}\")",
        "OnOptionSelect": "",
        "OnOptionHighlight": "SetInfoText(\"The field of view to return to when a scene ends when using free cam\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "SetSliderDialogStartValue(Main.DefaultFOV)\n        SetSliderDialogDefaultValue(85.0)\n        SetSliderDialogRange(1, 120)\n        SetSliderDialogInterval(1)\n",
        "OnOptionSliderAccept": "Main.DefaultFOV = (Value as Int)\n        SetSliderOptionValueST(Value, \"{0}\")\n",
        "OnOptionKeyMapChange": ""
    },
    "setCameraSpeed": {
        "statename": "setCameraSpeed",
        "AddOption": "AddSliderOption(\"Camera speed\", Main.FreecamSpeed, \"{0}\")",
        "OnOptionSelect": "",
        "OnOptionHighlight": "SetInfoText(\"The speed of the freecam\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "SetSliderDialogStartValue(Main.FreecamSpeed)\n        SetSliderDialogDefaultValue(3.0)\n        SetSliderDialogRange(1, 20)\n        SetSliderDialogInterval(1)\n",
        "OnOptionSliderAccept": "Main.FreecamSpeed = (Value as Int)\n        SetSliderOptionValueST(Value, \"{0}\")\n",
        "OnOptionKeyMapChange": ""
    },
    "setKeymap": {
        "statename": "setKeymap",
        "AddOption": "AddKeyMapOption(\"Start sex with target\", Main.KeyMap)",
        "OnOptionSelect": "",
        "OnOptionHighlight": "SetInfoText(\"Press this while looking at an actor to start OStim.\\nStarting OSex through OSA will result in normal OSex instead\\nOStim is intended to be played with mods that integrate it into the game instead of using this option\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "",
        "OnOptionSliderAccept": "",
        "OnOptionKeyMapChange": "Main.RemapStartKey(KeyCode)\n        SetKeyMapOptionValue(Option, KeyCode)\n"
    },
    "setKeyUp": {
        "statename": "setKeyUp",
        "AddOption": "AddKeyMapOption(\"Increase speed\", Main.SpeedUpKey)",
        "OnOptionSelect": "",
        "OnOptionHighlight": "SetInfoText(\"Increase speed during OStim scene\\nThe default key (numpad +) conflicts with many mods, may need to remap\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "",
        "OnOptionSliderAccept": "",
        "OnOptionKeyMapChange": "Main.RemapSpeedUpKey(KeyCode)\n        SetKeyMapOptionValue(Option, KeyCode)\n"
    },
    "setKeyDown": {
        "statename": "setKeyDown",
        "AddOption": "AddKeyMapOption(\"Decrease speed\", Main.SpeedDownKey)",
        "OnOptionSelect": "",
        "OnOptionHighlight": "SetInfoText(\"Decrease speed during OStim scene\\nThe default key (numpad -) conflicts with many mods, may need to remap\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "",
        "OnOptionSliderAccept": "",
        "OnOptionKeyMapChange": "Main.RemapSpeedDownKey(KeyCode)\n        SetKeyMapOptionValue(Option, KeyCode)\n"
    },
    "setPullOut": {
        "statename": "setPullOut",
        "AddOption": "AddKeyMapOption(\"Pull out\", Main.PullOutKey)",
        "OnOptionSelect": "",
        "OnOptionHighlight": "SetInfoText(\"Only usable in manual mode\\nWhen pressed during a sexual animation, causes your character to immediately cancel and \\\"pull out\\\" of the current animation\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "",
        "OnOptionSliderAccept": "",
        "OnOptionKeyMapChange": "Main.RemapPulloutKey(KeyCode)\n        SetKeyMapOptionValue(Option, KeyCode)\n"
    },
    "setControlToggle": {
        "statename": "setControlToggle",
        "AddOption": "AddKeyMapOption(\"Switch control mode\", Main.ControlToggleKey)",
        "OnOptionSelect": "",
        "OnOptionHighlight": "SetInfoText(\"Press during an animation: switch between manual and full-auto control for the duration of that animation \\n Press outside of animation: switch between manual and full-auto control permanently\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "",
        "OnOptionSliderAccept": "",
        "OnOptionKeyMapChange": "Main.RemapControlToggleKey(KeyCode)\nSetKeyMapOptionValue(Option, KeyCode)"
    },
    "setDomLightMode": {
        "statename": "setDomLightMode",
        "AddOption": "AddMenuOption(\"Main actor light mode\", DomLightModeList[Main.DomLightPos])",
        "OnOptionSelect": "",
        "OnOptionHighlight": "SetInfoText(\"Enable light on main actor at animation start\")\n",
        "OnOptionMenuOpen": "SetMenuDialogOptions(DomLightModeList)\n        ;SetMenuDialogStartIndex(DifficultyIndex)\n        ;SetMenuDialogDefaultIndex(1)\n",
        "OnOptionMenuAccept": "Main.DomLightPos = Index\n        SetMenuOptionValue(SetDomLightMode, DomLightModeList[Index])\n",
        "OnOptionSliderOpen": "",
        "OnOptionSliderAccept": "",
        "OnOptionKeyMapChange": ""
    },
    "setSubLightMode": {
        "statename": "setSubLightMode",
        "AddOption": "AddMenuOption(\"Second actor light mode\", SubLightModeList[Main.SubLightPos])",
        "OnOptionSelect": "",
        "OnOptionHighlight": "SetInfoText(\"Enable light on second actor at animation start\")\n",
        "OnOptionMenuOpen": "SetMenuDialogOptions(SubLightModeList)\n",
        "OnOptionMenuAccept": "Main.SubLightPos = Index\n        SetMenuOptionValueST(SubLightModeList[Index])\n",
        "OnOptionSliderOpen": "",
        "OnOptionSliderAccept": "",
        "OnOptionKeyMapChange": ""
    },
    "setDomLightBrightness": {
        "statename": "setDomLightBrightness",
        "AddOption": "AddMenuOption(\"Main actor light brightness\", DomLightBrightList[Main.DomLightBrightness])",
        "OnOptionSelect": "",
        "OnOptionHighlight": "SetInfoText(\"Set main actor's light's brightness\")\n",
        "OnOptionMenuOpen": "SetMenuDialogOptions(DomLightBrightList)\n",
        "OnOptionMenuAccept": "Main.DomLightBrightness = Index\n        SetMenuOptionValueST(DomLightBrightList[Index])\n",
        "OnOptionSliderOpen": "",
        "OnOptionSliderAccept": "",
        "OnOptionKeyMapChange": ""
    },
    "setSubLightBrightness": {
        "statename": "setSubLightBrightness",
        "AddOption": "AddMenuOption(\"Second actor light brightness\", SubLightBrightList[Main.SubLightBrightness])",
        "OnOptionSelect": "",
        "OnOptionHighlight": "SetInfoText(\"Set second actor's light's brightness\")\n",
        "OnOptionMenuOpen": "SetMenuDialogOptions(SubLightBrightList)\n",
        "OnOptionMenuAccept": "Main.SubLightBrightness = Index\n        SetMenuOptionValueST(SubLightBrightList[Index])\n",
        "OnOptionSliderOpen": "",
        "OnOptionSliderAccept": "",
        "OnOptionKeyMapChange": ""
    },
    "setOnlyLightInDark": {
        "statename": "setOnlyLightInDark",
        "AddOption": "AddToggleOption(\"Only use lights in darkness\", Main.LowLightLevelLightsOnly)",
        "OnOptionSelect": "Main.LowLightLevelLightsOnly = !Main.LowLightLevelLightsOnly\n        SetToggleOptionValueST(Main.LowLightLevelLightsOnly, False, \"setOnlyLightInDark\")\n",
        "OnOptionHighlight": "SetInfoText(\"Only use actor lights when the scene takes place in a dark area\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "",
        "OnOptionSliderAccept": "",
        "OnOptionKeyMapChange": ""
    },
    "exportSettings": {
        "statename": "exportSettings",
        "AddOption": "AddTextOption(\"Export Settings\", \"Done\")",
        "OnOptionSelect": "ExportSettings()\n",
        "OnOptionHighlight": "SetInfoText(\"Click this button to export the Ostim MCM settings.\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "",
        "OnOptionSliderAccept": "",
        "OnOptionKeyMapChange": ""
    },
    "importSettings": {
        "statename": "importSettings",
        "AddOption": "AddTextOption(\"Import Settings\", \"Done\")",
        "OnOptionSelect": "ImportSettings()\n",
        "OnOptionHighlight": "SetInfoText(\"Click this button to import the Ostim MCM settings.\")\n",
        "OnOptionMenuOpen": "",
        "OnOptionMenuAccept": "",
        "OnOptionSliderOpen": "",
        "OnOptionSliderAccept": "",
        "OnOptionKeyMapChange": ""
    }
}